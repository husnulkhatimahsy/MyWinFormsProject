<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>
 Pengenalan Kunci RSA dan Kunci Spritz
  1. Kunci RSA: RSA adalah sistem kunci publik dan kunci privat yang digunakan untuk melindungi kunci Spritz. (Kunci ini     
      dibangkitkan oleh penerima)
      a. Kunci Publik: Ini bisa dibagikan ke orang lain. Digunakan oleh pengirim untuk mengenkripsi kunci Spritz sebelum 
          dikirim ke penerima.
      b. Kunci Privat: Ini bersifat rahasia dan harus disimpan aman oleh penerima. Digunakan oleh penerima untuk membuka 
          kunci Spritz yang diterima.
  2. Kunci Spritz: Kunci ini digunakan untuk mengunci atau mengenkripsi gambar medis. Kunci ini bisa berbeda untuk setiap
      gambar, membuatnya lebih aman. (Kunci ini dibangkitkan oleh pengirim)

 Prinsip Keamanan Kunci
  1.  Kunci Publik RSA bisa disebar atau dibagikan ke pengirim tanpa risiko, karena hanya kunci ini yang digunakan untuk
       mengunci.
  2.  Kunci Privat RSA dan Kunci Spritz harus disimpan dengan aman dan tidak boleh dibagikan ke siapa pun. Jika kunci privat
       atau kunci Spritz diketahui pihak lain, keamanan data tidak dapat dijamin. 

 Pengiriman Gambar yang Sudah Terenkripsi
  1.  Sebelum mengirim gambar medis yang sudah dienkripsi, pastikan kunci Spritz yang digunakan untuk mengenkripsi gambar
       telah dienkripsi menggunakan kunci publik RSA dari penerima.
  2.  Dengan cara ini, hanya penerima yang memiliki kunci privat RSA yang bisa membuka kunci Spritz dan melihat gambar
       medis.</value>
  </data>
  <data name="richTextBox4.Text" xml:space="preserve">
    <value>
 Contoh Skenario Penggunaan dalam Rujukan Medis

 Dokter Pengirim (Dokter Spesialis Radiologi):
  -  Setelah menerima pasien rujukan, dokter spesialis radiologi melakukan pemeriksaan dan menghasilkan gambar medis (misalnya,
      CT scan atau MRI).
  -  Dokter spesialis radiologi mengenkripsi gambar medis menggunakan kunci Spritz agar data tetap aman.
  -  Dokter spesialis radiologi menggunakan kunci publik RSA milik dokter perujuk (dokter umum atau spesialis lain) untuk
      mengenkripsi kunci Spritz.
  -  Dokter spesialis radiologi kemudian mengirim gambar medis yang sudah terenkripsi beserta kunci Spritz yang juga sudah
      terenkripsi kepada dokter perujuk.

 Dokter Penerima (Dokter Umum atau Dokter Spesialis yang Merujuk):
  -  Dokter perujuk menerima gambar medis dan kunci Spritz yang sudah dienkripsi dari dokter spesialis radiologi.
  -  Dokter perujuk menggunakan kunci privat RSA mereka untuk membuka kunci Spritz.
  -  Setelah membuka kunci Spritz, dokter perujuk dapat membuka dan melihat hasil pemeriksaan gambar medis untuk menentukan
      langkah selanjutnya dalam perawatan pasien.</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>
 Penyimpanan di Perangkat:
  - Pengirim bertanggung jawab untuk menyimpan citra medis terenkripsi di perangkat.
  - Pengirim memulai dengan memilih file citra medis dan membangkitkan kunci simetris Spritz. Setelah itu, citra medis 
     dienkripsi menggunakan kunci Spritz.
  - Citra medis yang terenkripsi disimpan di perangkat untuk penggunaan lebih lanjut. Tidak perlu mengirimkan citra kepada 
     penerima jika hanya untuk penyimpanan lokal.
 
 Catatan: Kunci Spritz yang dihasilkan dapat digunakan untuk mengenkripsi beberapa citra medis selama aplikasi tidak ditutup. 
 Jika ingin menggunakan kunci Spritz yang berbeda untuk tiap citra, pengguna dapat menekan tombol "Reset Key" sesuai 
 kebutuhan.

 Pengiriman ke Receiver:
  - Pengirim bertanggung jawab untuk mengenkripsi citra medis sebelum mengirimkannya ke penerima. 
  - Pengirim memulai dengan memilih file citra medis, kemudian membangkitkan kunci simetris Spritz. 
  - Citra medis dienkripsi menggunakan algoritma Spritz, menghasilkan cipher image.
  - Setelah itu, kunci simetris Spritz dienkripsi menggunakan kunci publik RSA yang diberikan oleh penerima.
  - Cipher image dan cipher key kemudian dikirimkan kepada penerima.</value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value> 
 Penerima bertanggung jawab untuk menerima dan mendekripsi citra medis. 
   - Penerima bertanggung jawab untuk menerima dan mendekripsi citra medis.
   - Penerima membangkitkan pasangan kunci RSA hanya satu kali, yang terdiri dari kunci publik dan kunci privat. Kunci ini akan 
      disimpan dan digunakan untuk mendekripsi beberapa kunci simetris Spritz yang akan diterima di masa mendatang. Tidak 
      perlu membangkitkan kunci RSA setiap kali proses enkripsi berlangsung.
   - Setelah membangkitkan kunci, penerima membagikan kunci publik RSA kepada pengirim untuk digunakan dalam proses 
      enkripsi kunci Spritz.
   - Kemudian, penerima menerima cipher image dan cipher key dari pengirim melalui media yang aman. Cipher key adalah kunci 
      Spritz yang telah dienkripsi menggunakan kunci publik RSA penerima.
   - Penerima menggunakan kunci privat RSA untuk mendekripsi cipher key, menghasilkan kunci simetris Spritz yang digunakan 
      untuk enkripsi citra medis.
   - Setelah memperoleh kunci simetris Spritz, penerima melanjutkan dengan mendekripsi cipher image menggunakan kunci simetris 
      tersebut, sehingga citra medis asli dapat dipulihkan dan diakses.
 
 Catatan: Kunci RSA hanya perlu dibangkitkan sekali oleh penerima dan dapat digunakan berkali-kali untuk menerima beberapa 
 kunci Spritz. Selama kunci privat RSA tidak diubah, proses ini dapat berlangsung tanpa perlu membangkitkan kunci baru.</value>
  </data>
</root>